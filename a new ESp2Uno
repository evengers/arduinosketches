
//for esp8266 generic module

/*

1) Basic ESP8266 MQTT example  with WIFI   conveys uno's  messages to/from network via MQTT
2) Messages passed between UNo (or TIVAC) and EP-01 module using UART/Serial (could be I2C instead)
                     - MQTT will need strings need conversion the messages from UNO that are transferred as bytes (in structs) with SerialTransfer

 3) MQTT will reconnect to the server if the connection is lost using a blocking
 reconnect function. See the 'mqtt_reconnect_nonblocking' example for how to
 achieve the same result without blocking the main loop.
 To install the ESP8266 board, (using Arduino 1.6.4+):
  - Add the following 3rd party board manager under "File -> Preferences -> Additional Boards Manager URLs":
       http://arduino.esp8266.com/stable/package_esp8266com_index.json
  - Open the "Tools -> Board -> Board Manager" and click install for the ESP8266"
  - Select your ESP8266 in "Tools -> Board"
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>




bool flagUNOtx  = false;  //used to signal receipt of mqtt message that needs to be conveyed to UNO
char toUNObuff[30];

char ICbuff[40];
bool flagICrx = false;
char outStr[7]={'/0'};  //buffer for outstr from wire to mqtt




// Update these with values suitable for your network.

const char* ssid = "ZuhauseGizmos";
const char* password = "Canada99!Gizmos";
const char* mqtt_server = "192.168.2.222";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

int thisIP; //use this for topics to identify sender set at wifi connect
char theOutTopic[12];
char theInTopic[12]; //both will be concattonated with the last 3 of the ipaddress to uniquely identify traffic

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  thisIP = WiFi.localIP()[3]; // just need the last 3 digits ofthe ip to uniquely identify this node
  
  Serial.println(thisIP);

  
}

void callback(char* topic, byte* payload, unsigned int length) {


char message[length + 1];

  // convert the payload from a byte array to a char array
  memcpy(message, payload, length);

  // add NULL terminator to message, making it a correct c-string
  message[length] = '\0'; // maybe alternative just cocat the start and end and seiarl.println message??
  
  snprintf (msg, MSG_BUFFER_SIZE, "%sCMD: %s%s", startMarker,message,endMarker);
    Serial.println(msg); //send it to the UNO
    
 /* next few lines just here for checking syntax ideas
 if ((char)payload[0] == '1') 
 for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  */
  
}

   

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      String theOutTopicStr = "ok/" + String(thisIP);
      Serial.println("will be publishing with this topic ..." + theOutTopicStr);
      theOutTopicStr.toCharArray(theOutTopic,12);
      client.publish(theOutTopic, "hello world");
      
      // ... and resubscribe
      client.subscribe("cmd/"+thisIP);
      String theInTopicStr = "cmd/" + String(thisIP);
      Serial.println("subscribing to  ... " + theInTopicStr);
      theInTopicStr.toCharArray(theInTopic,12);
      client.subscribe(theInTopic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}


void setup() {
 // pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(9600);
  delay(500);
  
  setup_wifi();
  delay(5000);
  
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  
}





// Variables used for incoming data
const byte maxDataLength = 20;
char receivedChars[21] ;
boolean newData = false;
 char startMarker = '<';
 char endMarker = '>';
String out ="";




void loop() {
 delay(10);
 
  if (!client.connected()) {
    reconnect();
  }

 client.loop();
 

// send what came from UNO over mqtt AS STRING 
 recvWithStartEndMarkers(); 
    if (newData)  {   processCommand();  }    


  
  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "%sheartbeat #%ld%s", startMarker,value,endMarker);
    Serial.println(msg);
    client.publish(theOutTopic, msg);
    
  }

  
}






/*
****************************************
* Function processCommand
* parses data commands contained in receivedChars[]
* receivedChars[] has not been checked for errors
* 
* passed:
*  
* global: 
*       receivedChars[]
*       newData
*
* Returns:
*          
* Sets:
*       receivedChars[]
*       newData
*
*/


void processCommand()
{

     //pass it overmqtt
     snprintf (msg, MSG_BUFFER_SIZE, "%sMSG:%s%s", startMarker,receivedChars,endMarker);
  //   client.publish(theOutTopic, msg);
     
     /*example of processing command
  
     if (strcmp ("sendTemp",receivedChars) == 0) 
     { 
         float temp = getTemp();
         altSerial.print("<");  altSerial.print( temp ); altSerial.print(">");
         if (DEBUG) { Serial.print("Temp is ");   Serial.print(temp);  Serial.println("");   }
     }
     */
     
     newData = false;
     receivedChars[0]='\0'; 
   
}



       

// function recvWithStartEndMarkers by Robin2 of the Arduino forums
// See  http://forum.arduino.cc/index.php?topic=288234.0
/*
****************************************
* Function recvWithStartEndMarkers
* reads serial data and returns the content between a start marker and an end marker.
* 
* passed:
*  
* global: 
*       receivedChars[]
*       newData
*
* Returns:
*          
* Sets:
*       newData
*       receivedChars
*
*/
void recvWithStartEndMarkers()
{
     static boolean recvInProgress = false;
     static byte ndx = 0;
     char startMarker = '<';
     char endMarker = '>';
     char rc;
 
     if (Serial.available() > 0) 
     {
          rc = Serial.read();
          Serial.print(rc);  //to debug
          if (recvInProgress == true) 
          {
               if (rc != endMarker) 
               {
                    receivedChars[ndx] = rc;
                    ndx++;
                    if (ndx > maxDataLength) { ndx = maxDataLength; }
               }
               else 
               {
                     receivedChars[ndx] = '\0'; // terminate the string
                     recvInProgress = false;
                     ndx = 0;
                     newData = true;
               }
          }
          else if (rc == startMarker) { recvInProgress = true; }
     }

}
//THE ESP01 8266 generic module side








// and the UNO side

#include <AltSoftSerial.h>

//slave for arduino tpo process data
//excellent example here
//http://www.martyncurrey.com/arduino-to-arduino-by-bluetooth/

// AltSoftSerial always uses these pins:
//
// Board          Transmit  Receive   PWM Unusable
// -----          --------  -------   ------------
// Teensy 3.0 & 3.1  21        20         22
// Teensy 2.0         9        10       (none)
// Teensy++ 2.0      25         4       26, 27
// Arduino Uno        9         8         10
// Arduino Leonardo   5        13       (none)
// Arduino Mega      46        48       44, 45
// Wiring-S           5         6          4
// Sanguino          13        14         12

AltSoftSerial altSerial;



// Set DEBUG to true to output debug information to the serial monitor
boolean DEBUG = true;
 

// Variables used for incoming data
const byte maxDataLength = 20;
char receivedChars[21] ; //buffer for data in from ESP
char lastreceivedChars[21] ; //keep the last char receivedChars[21] in case aa ack needed back to ESP
boolean newData = false;

//const byte TEMP_PIN = A0;

void setup()  
{
    if (DEBUG)
    {
        // open serial communication for debugging
        Serial.begin(9600);
        while (!Serial) ; // wait for Arduino Serial Monitor to open
        Serial.println(__FILE__);
        Serial.println(" ");
    }

    //  open a software serial connection to the Bluetooth module.
    altSerial.begin(9600); 
    if (DEBUG)  {   Serial.println(F("AltSoftSerial started at 9600"));     }
    newData = false;
 
} // void setup()
 
 

 
void loop()  
{
  char c;
   if (Serial.available()) {
    c = Serial.read();
    altSerial.print(c);
  }
  
    recvWithStartEndMarkers(); 
    if (newData)  {   processCommand();  }    
}
    

/*
 * 
void loop() {
  char c;

  if (Serial.available()) {
    c = Serial.read();
    altSerial.print(c);
  }
  if (altSerial.available()) {
    c = altSerial.read();
    Serial.print(c);
  }
}


 */


/*
****************************************
* Function getTemp
* read a analogue pin and converts the value to a temperature
* based on the adafruit thermistor guide https://learn.adafruit.com/thermistor/testing-a-thermistor 
* 
* passed:
*  
* global: 
*
* Returns:
*        float temp  
* Sets:
*
*/



/*
****************************************
* Function processCommand
* parses data commands contained in receivedChars[]
* receivedChars[] has not been checked for errors
* 
* passed:
*  
* global: 
*       receivedChars[]
*       newData
*
* Returns:
*          
* Sets:
*       receivedChars[]
*       newData
*
*/


void processCommand()
{

     Serial.println(receivedChars);
     
     /*example of processing command
  
     if (strcmp ("sendTemp",receivedChars) == 0) 
     { 
         float temp = getTemp();
         altSerial.print("<");  altSerial.print( temp ); altSerial.print(">");
         if (DEBUG) { Serial.print("Temp is ");   Serial.print(temp);  Serial.println("");   }
     }
     */
     
     //if ack asked for send one for last message
  if (strcmp ("ack",receivedChars) == 0) {
    snprintf (msg, MSG_BUFFER_SIZE, "%sACK: #%s%s", startMarker,lastreceivedChars,endMarker);
    Serial.println(msg);
  }
     
       //strcpy(incomingMessage, message); //copy c strings
 // memcpy(incomingMessage, message, length); //when NULL terminator not known?
     
     
    strcpy( lastreceivedChars, receivedChars); // just in case we need to send an ack
     newData = false;
     receivedChars[0]='\0'; 
   
}



       

// function recvWithStartEndMarkers by Robin2 of the Arduino forums
// See  http://forum.arduino.cc/index.php?topic=288234.0
/*
****************************************
* Function recvWithStartEndMarkers
* reads serial data and returns the content between a start marker and an end marker.
* 
* passed:
*  
* global: 
*       receivedChars[]
*       newData
*
* Returns:
*          
* Sets:
*       newData
*       receivedChars
*
*/
void recvWithStartEndMarkers()
{
     static boolean recvInProgress = false;
     static byte ndx = 0;
     char startMarker = '<';
     char endMarker = '>';
     char rc;
 
     if (altSerial.available() > 0) 
     {
          rc = altSerial.read();
          Serial.print(rc);  //to debug
          if (recvInProgress == true) 
          {
               if (rc != endMarker) 
               {
                    receivedChars[ndx] = rc;
                    ndx++;
                    if (ndx > maxDataLength) { ndx = maxDataLength; }
               }
               else 
               {
                     receivedChars[ndx] = '\0'; // terminate the string
                     recvInProgress = false;
                     ndx = 0;
                     newData = true;
               }
          }
          else if (rc == startMarker) { recvInProgress = true; }
     }

}
