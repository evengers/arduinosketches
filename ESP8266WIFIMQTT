/*
 Basic ESP8266 MQTT example
 This sketch demonstrates the capabilities of the pubsub library in combination
 with the ESP8266 board/library.
 It connects to an MQTT server then:
  - publishes "hello world" to the topic "outTopic" every two seconds
  - subscribes to the topic "inTopic", printing out any messages
    it receives. NB - it assumes the received payloads are strings not binary
  - If the first character of the topic "inTopic" is an 1, switch ON the ESP Led,
    else switch it off
 It will reconnect to the server if the connection is lost using a blocking
 reconnect function. See the 'mqtt_reconnect_nonblocking' example for how to
 achieve the same result without blocking the main loop.
 To install the ESP8266 board, (using Arduino 1.6.4+):
  - Add the following 3rd party board manager under "File -> Preferences -> Additional Boards Manager URLs":
       http://arduino.esp8266.com/stable/package_esp8266com_index.json
  - Open the "Tools -> Board -> Board Manager" and click install for the ESP8266"
  - Select your ESP8266 in "Tools -> Board"
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>

//ESP as MASTER
#include <Wire.h>
#define I2CAddressESPWifi 8
int x=32;



// Update these with values suitable for your network.

const char* ssid = "ZuhauseGizmos";
const char* password = "Canada99!Gizmos";
const char* mqtt_server = "192.168.2.222";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

int thisIP; //use this for topics to identify sender set at wifi connect
char theOutTopic[12];
char theInTopic[12]; //both will be concattonated with the last 3 of the ipaddress to uniquely identify traffic

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  thisIP = WiFi.localIP()[3]; // just need the last 3 digits ofthe ip to uniquely identify this node
  
  Serial.println(thisIP);
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      String theOutTopicStr = "ok/" + String(thisIP);
      Serial.println("will be publishing with this topic ..." + theOutTopicStr);
      theOutTopicStr.toCharArray(theOutTopic,12);
      client.publish(theOutTopic, "hello world");
      
      // ... and resubscribe
      //client.subscribe("cmd/"+thisIP);
      String theInTopicStr = "cmd/" + String(thisIP);
      Serial.println("subscribing to  ... " + theInTopicStr);
      theInTopicStr.toCharArray(theInTopic,12);
      client.subscribe(theInTopic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  Wire.begin(0,2);//Change to Wire.begin() for non ESP.
}


void wireComm() {

  Wire.beginTransmission(I2CAddressESPWifi);
Wire.write(x);
Wire.endTransmission();
x++;
delay(1);//Wait for Slave to calculate response.
Wire.requestFrom(I2CAddressESPWifi,10);
Serial.print("Request Return:[");

char arrayBuf[30];
int bufCtr = 0;
while (Wire.available())
{
delay(1);
char c = Wire.read();
Serial.print(c);

arrayBuf[bufCtr] = c;
bufCtr++;
}
Serial.println("]");
delay(500);

arrayBuf[bufCtr] = '/0';
if(strlen(arrayBuf)>1)
  {
   client.publish(theOutTopic, arrayBuf);
  }

}

void loop() {

  if (!client.connected()) {
    reconnect();
  }


wireComm();


//get strings from arduino uno or tivac
   String  gotStr= "";
    bool gotOne = false;
  
  if (Serial.available() > 0) {
    gotStr= Serial.readString();
    gotStr.trim(); //remove linefeed
    gotOne = true;
  }
  if (gotOne) {
     
      String theTopicStr = "ok/" + String(thisIP);
     
      char theMsg[12];
      theTopicStr.toCharArray(theOutTopic,12);
      gotStr.toCharArray(theMsg,12);
      client.publish(theOutTopic, theMsg);
  }

  
  
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "heartbeat #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish(theOutTopic, msg);
  }
}
