//THE UNO side

#include "SerialTransfer.h"
#include <SoftwareSerial.h>

SoftwareSerial mySerial(8, 9); // RX, TX




SerialTransfer myTransfer;

struct STRUCT {
  char z;
  float y;
} testStruct;

//passing data via structs that must match the structs on uno/tivac side
struct STRUCT {
  char z;
  float y;
} fromESPStruct, toESPStruct;  //messages in from UNO  and out to  Uno  ... in this case same structure (also needs to be on UNO side



void setup()
{
  Serial.begin(57600);
  mySerial.begin(57600);
  myTransfer.begin(mySerial);

  testStruct.z = '$';
  testStruct.y = 4.5;
}


void loop()
{
  toESPStruct.y = toESPStruct.y + toESPStruct.y;
  myTransfer.txObj(outStruct,sizeof(outStruct));
  myTransfer.sendData(sizeof(outStruct));
  delay(500);
    String  gotStr= "";
    bool gotOne = false;

 if(mySerial.available())
  {
     myTransfer.rxObj(fromESPStruct);   //receive the message from ESP
    Serial.print(testStruct.z);
    Serial.println(testStruct.y);
  }
  /*
  
  if (mySerial.available()) {
    gotStr= mySerial.readString();
    gotOne = true;
  }
  if (gotOne) {
    Serial.println("Received: " + gotStr);
  }
  */
}



//for esp8266 generic module

/*

1) Basic ESP8266 MQTT example  with WIFI   conveys uno's  messages to/from network via MQTT
2) Messages passed between UNo (or TIVAC) and EP-01 module using UART/Serial (could be I2C instead)
                     - MQTT will need strings need conversion the messages from UNO that are transferred as bytes (in structs) with SerialTransfer

 3) MQTT will reconnect to the server if the connection is lost using a blocking
 reconnect function. See the 'mqtt_reconnect_nonblocking' example for how to
 achieve the same result without blocking the main loop.
 To install the ESP8266 board, (using Arduino 1.6.4+):
  - Add the following 3rd party board manager under "File -> Preferences -> Additional Boards Manager URLs":
       http://arduino.esp8266.com/stable/package_esp8266com_index.json
  - Open the "Tools -> Board -> Board Manager" and click install for the ESP8266"
  - Select your ESP8266 in "Tools -> Board"
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>

#include "SerialTransfer.h"
SerialTransfer myTransfer;

#define BAUD_RATE 57600
#include <SoftwareSerial.h>
SoftwareSerial softSerial;

//passing data via structs that must match the structs on uno/tivac side
struct STRUCT {
  char z;
  float y;
} fromUnoStruct, toUnoStruct;  //messages in from UNO  and out to  Uno  ... in this case same structure (also needs to be on UNO side


bool flagUNOtx  = false;  //used to signal receipt of mqtt message that needs to be conveyed to UNO
char toUNObuff[30];

char ICbuff[40];
bool flagICrx = false;
char outStr[7]={'/0'};  //buffer for outstr from wire to mqtt



/////////////////////////////////////////////////////////////////// Callbacks
void hi()
{
  myTransfer.rxObj(testStruct);
  Serial.print(testStruct.z);
  Serial.println(testStruct.y);
  dtostrf(testStruct.y,3,2,outStr); //convert float to out buffer
  flagICrx = true; //will truigger send in main loop
}
// supplied as a reference - persistent allocation required
const functionPtr callbackArr[] = { hi };
///////////////////////////////////////////////////////////////////




//ESP as MASTER
#include <Wire.h>
#define I2CAddressESPWifi 8
int x=32; //buffer size max??



// Update these with values suitable for your network.

const char* ssid = "ZuhauseGizmos";
const char* password = "Canada99!Gizmos";
const char* mqtt_server = "192.168.2.222";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

int thisIP; //use this for topics to identify sender set at wifi connect
char theOutTopic[12];
char theInTopic[12]; //both will be concattonated with the last 3 of the ipaddress to uniquely identify traffic

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  thisIP = WiFi.localIP()[3]; // just need the last 3 digits ofthe ip to uniquely identify this node
  
  Serial.println(thisIP);

  
}

void callback(char* topic, byte* payload, unsigned int length) {
  flagUNOtx  = true; 
  toUNObuff= payload;         //not sure about this  toUNObuff[30]
  
  //do not need rest of this
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      String theOutTopicStr = "ok/" + String(thisIP);
      Serial.println("will be publishing with this topic ..." + theOutTopicStr);
      theOutTopicStr.toCharArray(theOutTopic,12);
      client.publish(theOutTopic, "hello world");
      
      // ... and resubscribe
      //client.subscribe("cmd/"+thisIP);
      String theInTopicStr = "cmd/" + String(thisIP);
      Serial.println("subscribing to  ... " + theInTopicStr);
      theInTopicStr.toCharArray(theInTopic,12);
      client.subscribe(theInTopic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}


void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

 // Wire.begin(0,2);//Change to Wire.begin() for non ESP.


// see here for softwareserial
//https://docs.arduino.cc/learn/built-in-libraries/software-serial
//On Arduino or Genuino 101 boards the current maximum RX speed is 57600bps. AND  RX doesn't work on digital pin 13.
  softSerial.begin(BAUD_RATE); //other paramters here to match UNO side?? 
  myTransfer.begin(softSerial);
  
 // myTransfer.begin(Serial);
  
   ///////////////////////////////////////////////////////////////// Config Parameters
  configST myConfig;
  myConfig.debug        = true;
  myConfig.callbacks    = callbackArr;
  myConfig.callbacksLen = sizeof(callbackArr) / sizeof(functionPtr);
  /////////////////////////////////////////////////////////////////
  
//  myTransfer.begin(Wire, myConfig);
  
}



void wireComm() {

  Wire.beginTransmission(I2CAddressESPWifi);
Wire.write(x);
Wire.endTransmission();
x++;
delay(1);//Wait for Slave to calculate response.
Wire.requestFrom(I2CAddressESPWifi,10);
Serial.print("Request Return:[");


int bufCtr = 0;
while (Wire.available())
{
delay(1);
char c = Wire.read();
Serial.print(c);

ICbuff[bufCtr] = Wire.read();
bufCtr++;
}
Serial.println("]");
delay(500);
ICbuff[bufCtr] = '/0'; //assume it is a string and terminate it
flagICrx = true; //will truigger send in main loop


}



void loop() {

  if (!client.connected()) {
    reconnect();
  }

 client.loop();
 

// send what came from UNO over mqtt AS STRING 
  if(myTransfer.available())
  {
    myTransfer.rxObj(fromUnoStruct);
   // Serial.print(testStruct.z);
   // Serial.println(testStruct.y);
     dtostrf(fromUnoStruct.y,3,2,outStr);
    client.publish(theOutTopic,outStr);
    outStr[0]='/0';
  }
  
//wireComm();

fromUnoStruct, toUnoStruct


//send what is reeived from from MQTT to UNO  
if(flagUNOtx)
{
    
     toUnoStruct.y = 99.99;  //just testing  ... replace with string conversion
     // ... need to translate it to non string as defined by struct    i.e. from toUNObuff that is filled by mqtt payload
     myTransfer.txObj(toUnoStruct,sizeof(toUnoStruct));
     myTransfer.sendData(sizeof(toUnoStruct));
     flagUNOtx  = false;
     
     //
     toUNObuff[0] = '/0'; //clear the buffer??
    
  }


/*no longer necessary??
//get strings from arduino uno or tivac
   String  gotStr= "";
    bool gotOne = false;
  
  if (Serial.available() > 0) {
    gotStr= Serial.readString();
    gotStr.trim(); //remove linefeed
    gotOne = true;
  }
  if (gotOne) {
     
      String theTopicStr = "ok/" + String(thisIP);
     
      char theMsg[12];
      theTopicStr.toCharArray(theOutTopic,12);
      gotStr.toCharArray(theMsg,12);
      client.publish(theOutTopic, theMsg);
  }

  */
  
 

  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "heartbeat #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish(theOutTopic, msg);
    /*this fires
     dtostrf(testStruct.y,3,2,outStr);
    client.publish(theOutTopic,outStr);
    outStr[0]='/0';
    */
  }
}

//THE ESP01 8266 generic module side
